// I've imported the neccessary packages from the java libary
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map.Entry;
import javax.swing.JFrame;

/*
A program Election that computes the tally in a write-in election, and announces the
winner. There is no pre-determined set of candidates. Whoever appears the most in the votes is the winner.
The user enters the individual name & clicks the vote button to submit thee vote. To compute the tally, the
program uses both an ArrayList that only holds String variables (names), and a HashMap that holds String (names) 
and Integer Values (count).*/
/**
 *
 * @author 21422705 Abas Abdi & Prabhleen 21402915 & Said 21428213
 */
public class Election extends javax.swing.JFrame {

    /**
     * Creates new form Election
     */
    public Election() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setTitle("ELECTION");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(252, 251, 251));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vt.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 217, 31));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/120.png"))); // NOI18N
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 120, 120));

        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CANDIDATE", "VOTES"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setOpaque(false);
        jTable1.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 220, 200));

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 210, 49));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wt200.png"))); // NOI18N
        jLabel2.setText("THE WINNER");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 210, 40));

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 53, 200, 50));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wb.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, 210, 60));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Created a HashMap object called map that will store String keys and Integer values
    we've specifically placed it outiside the button1 action event so that the data within 
    the hashmap isn't lost everytime the button is pressed. */
    HashMap<String, Integer> map = new HashMap<>();


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Created a DeafultTableModel object called model for my jTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Created an ArrayList object called Candidates that will store strings
        ArrayList<String> Candidates = new ArrayList<>();
        // Removes all data values within the table (using it so candidate names aren't repeated in the table)
        model.getDataVector().removeAllElements();
        // Adding the candidates name to the arraylist & formatting it so that only the first letter of the name is capitalised 
        Candidates.add(jTextField1.getText().substring(0, 1).toUpperCase() + jTextField1.getText().substring(1).toLowerCase());
        // Loops through the names in the Candidates arraylist 
        for (String Name : Candidates) {
            /* If the 'map' hashmap doesn't already contains a name
            in the Candidates arraylist it inserts the name in the map 
            hashmap and gives it a value of zero (0) before adding one (1) to it.*/
            if (!map.containsKey(Name)) {
                // This is mainly to stop an error from occuring if we tried to add 1 to non existent value.
                map.put(Name, 0);
            }
            /* If the 'map' hashmap already contains a name in the 
            Candidates arraylist it inserts the name in the same place 
            within the map and increases it's value by 1. */
            map.put(Name, map.get(Name) + 1);
            // This just formats the user's input in jTextField1
            jTextField1.setText(Name);
        }
        
        // Gets the max value in the hashmap
        int max = Collections.max(map.values());
        
        // Loops through the hashmap
        for (Entry<String, Integer> entry : map.entrySet()) {
        // Creates a new object called row containing the map key and the value associated with it
            Object[] row = {entry.getKey(), entry.getValue()};
        // Adds the object called "row" as a row to the jTable
            model.addRow(row);
        /* Outputs the name of the winner & number of votes recieved to jTextField2 
            if the 'map' hashmap's value is equal to the max value. */
            if (max == entry.getValue()) {
                jTextField2.setText(entry.getKey() + " with " + entry.getValue() + " votes!");
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Created a DeafultTableModel object called model for my jTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Cleared the jTable by setting the amount of rows to Zero
        model.setRowCount(0);
        // Cleared the text fields by setting their values to ""
        jTextField1.setText("");
        jTextField2.setText("");
        // Cleared the hashmap using the clear method
        map.clear();

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Election.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Election.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Election.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Election.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Election().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
